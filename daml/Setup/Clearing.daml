module Setup.Clearing where

import Daml.Script

import Marketplace.Custodian
import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Investor
import Marketplace.Issuer
import Marketplace.Operator

import Marketplace.CentralCounterparty
import Marketplace.CentralCounterpartyCustomer

import Marketplace.Token
import Marketplace.Trading
import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Types
import DA.Foldable (forA_)

import DA.Next.Set

data LedgerParties = LedgerParties with
  userAdmin  : Party -- ^DABL uses 'UserAdmin' for 'Operator'
  public     : Party
  custodian  : Party
  exchange   : Party
  btcIssuer  : Party
  usdtIssuer : Party
  alice      : Party
  bob        : Party
  broker     : Party
  ccp        : Party
    deriving (Eq, Show)

allocateParties : Script LedgerParties
allocateParties = do
  operator <- allocatePartyWithHint "Operator" (PartyIdHint "Operator")
  btcIssuer <- allocatePartyWithHint "BtcIssuer" (PartyIdHint "BtcIssuer")
  usdtIssuer <- allocatePartyWithHint "UsdtIssuer" (PartyIdHint "UsdtIssuer")
  custodian <- allocatePartyWithHint "Custodian" (PartyIdHint "Custodian")
  exchange <- allocatePartyWithHint "Exchange" (PartyIdHint "Exchange")
  broker <- allocatePartyWithHint "Broker" (PartyIdHint "Broker")
  ccp <- allocatePartyWithHint "Ccp" (PartyIdHint "Ccp")
  public <- allocatePartyWithHint "Public" (PartyIdHint "Public")

  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  return $ LedgerParties operator public custodian exchange btcIssuer usdtIssuer alice bob broker ccp

setupClearing : Script ()
setupClearing = allocateParties >>= doSetupClearing

doSetupClearing : LedgerParties -> Script ()
doSetupClearing lp@(LedgerParties operator public custodian exchange issuer _ alice bob _ ccp) = do

  carl <- allocatePartyWithHint "Carl" (PartyIdHint "Carl")
  dana <- allocatePartyWithHint "Dana" (PartyIdHint "Dana")

  -- Onboard and create relationships
  handleOnboarding lp

  -- onbard investors
  onboardInvestor lp alice "Alice the Investor"
  onboardInvestor lp bob "Bob the Investor"
  onboardInvestor lp carl "Carl the Investor"
  onboardInvestor lp dana "Dana the Investor"

  let observers = [operator, public, custodian, exchange, issuer, ccp, alice, bob, carl, dana]

  btcTokenId <- createToken operator issuer "BTCF21" "BTC January 21" 6 observers
  ethTokenId <- createToken operator issuer "ETH21" "ETH January 21" 6 observers
  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers

  let btcPair = (btcTokenId, usdTokenId)
  let ethPair = (btcTokenId, usdTokenId)

  -- the exchange adds support for BTC/USDT pair
  exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_AddPair with baseTokenId = btcTokenId, quoteTokenId = usdTokenId
  exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_AddPair with baseTokenId = ethTokenId, quoteTokenId = usdTokenId

  aliceAccts <- setupInvestorAccount lp usdTokenId alice
  bobAccts <- setupInvestorAccount lp usdTokenId bob
  carlAccts <- setupInvestorAccount lp usdTokenId carl
  danaAccts <- setupInvestorAccount lp usdTokenId dana

  let tradePairs = [ (alice, bob, btcPair, 50.0, 1000.0)
                   , (alice, carl, btcPair, 10.0, 3000.0)
                   , (alice, carl, ethPair, 34.0, 5044.0)
                   , (carl, bob, ethPair, 10.0, 5044.0)
                   , (dana, alice, btcPair, 10.0, 100.0)
                   , (bob, dana, ethPair, 456.0, 1434.0) ]

  let trades = zipWith (createTrade ccp exchange) [1..(length tradePairs)] tradePairs
  forA_ trades (\t -> exchange `submit` createCmd t)

onboardInvestor : LedgerParties -> Party -> Text-> Script ()
onboardInvestor lp investor name = do
  let name     = "default name"
      title    = "default title"
      issuerID = "default issuerID"
      location = "default location"

  let operator  = lp.userAdmin
      custodian = lp.custodian
      exchange  = lp.exchange
      ccp       = lp.ccp

  -- register investor
  inviteCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardInvestor with investor = investor, ..
  investorCid <- investor `submit` exerciseCmd inviteCid InvestorInvitation_Accept with isPublic = True, ..

  -- establish relationship with custodian
  relationshipRequestCid <- investor `submit` exerciseCmd investorCid Investor_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipRequestCid CustodianRelationshipRequest_Approve

  -- become exchange participant
  (_, exchInviteCid) <- exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = investor
  investor `submit` exerciseCmd exchInviteCid ExchangeParticipantInvitation_Accept

  -- become CCP customer
  ccpInviteCid <- ccp `submit` exerciseByKeyCmd @CCP (operator, ccp) CCP_InviteCustomer with ccpCustomer = investor
  ccpCustomerId <- investor `submit` exerciseCmd ccpInviteCid CCPCustomerInvitation_Accept

  return ()

data InvestorAccounts = InvestorAccounts with
    iaCustodian : ContractId AssetDeposit
    iaCcp : ContractId AssetDeposit
  deriving (Show,Eq)

setupInvestorAccount : LedgerParties -> Id -> Party -> Script InvestorAccounts
setupInvestorAccount lp usdTokenId investor = do

  let operator  = lp.userAdmin
      custodian = lp.custodian
      exchange  = lp.exchange
      ccp       = lp.ccp

  -- deposit USD into account
  depositCid <- custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = usdTokenId, depositQuantity = 500.0, beneficiary = investor

  -- move to ccp account
  transferRequestCid <- investor `submit` exerciseByKeyCmd @Investor (operator, investor) Investor_AllocateToProvider with depositCid = depositCid, provider = ccp

  -- bank accepts transfer
  ccpDespositCid <- custodian `submit` exerciseCmd transferRequestCid DepositTransferRequest_Approve

  -- deposit more USD in Bob and Alice's custodian account
  custodianDepositCid <- custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = usdTokenId, depositQuantity = 100000.0, beneficiary = investor

  return $ InvestorAccounts ccpDespositCid custodianDepositCid

createToken : Party -> Party -> Text -> Text -> Int -> [Party] -> Script Id
createToken operator issuer name description quantityPrecision observers = do
  issuer `submit` exerciseByKeyCmd @Issuer (operator, issuer) Issuer_IssueToken with name, description, quantityPrecision, isPublic = True, observers
  return $ Id with signatories = fromList [ issuer ], label = name, version = 0

handleOnboarding : LedgerParties -> Script ()
handleOnboarding lp@(LedgerParties operator public custodian exchange btcIssuer usdtIssuer alice bob broker ccp) = do
  let name = "default name"
      title = "default title"
      issuerID = "default issuerID"
      location = "default location"

  -- create operator
  operator `submit` createCmd Operator with ..

  -- onboard custodian
  custodianInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCustodian with ..
  custodian `submit` exerciseCmd custodianInvCid CustodianInvitation_Accept with name = "Bank of Example", ..

  -- onboard issuers
  btcIssuerInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardIssuer with issuer = btcIssuer, ..
  btcIssuerCid <- btcIssuer `submit` exerciseCmd btcIssuerInvCid IssuerInvitation_Accept with name = "BTC Issuer", ..

  usdtIssuerInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardIssuer with issuer = usdtIssuer, ..
  usdtIssuerCid <- usdtIssuer `submit` exerciseCmd usdtIssuerInvCid IssuerInvitation_Accept with name = "USDT Issuer", ..

  -- oboard exchange
  exchangeInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardExchange with ..
  exchangeCid <- exchange `submit` exerciseCmd exchangeInvCid ExchangeInvitation_Accept with name = "Exberry Exchange", ..

  -- onboard ccp
  ccpInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCCP with ccp = ccp, ..
  (_,ccpCid) <- ccp `submit` exerciseCmd ccpInvCid CCPInvitation_Accept with name = "CCP", ..


  -- issuers establish a relationship with the custodian
  relationshipReqCid <- btcIssuer `submit` exerciseCmd btcIssuerCid Issuer_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  relationshipReqCid <- usdtIssuer `submit` exerciseCmd usdtIssuerCid Issuer_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve


  -- exchange establishes a relationship with the custodian
  relationshipReqCid <- exchange `submit` exerciseCmd exchangeCid Exchange_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  -- ccp establishes relationship with the custodian
  relationshipReqCid <- ccp `submit` exerciseCmd ccpCid CCP_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve


  -- exchange participants --


  return ()

createTrade : Party -> Party -> Int -> (Party, Party, IdPair, Decimal, Decimal) -> Trade
createTrade ccp exchange currentId (buyer, seller, instrument, quantity, price) = Trade with
      ccp = ccp
      exchange = exchange
      eventId = currentId + 50
      eventTimestamp = "1329834"
      instrument = instrument
      trackingNumber = currentId + 5000
      buyer = buyer
      buyerOrderId = currentId + 1000
      seller = seller
      sellerOrderId = currentId + 2000
      matchId = currentId
      executedQuantity = quantity
      executedPrice = price

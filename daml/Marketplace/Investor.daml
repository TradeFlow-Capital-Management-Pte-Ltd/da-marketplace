daml 1.2
module Marketplace.Investor where

import Marketplace.Custodian
import Marketplace.Registry
import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Types


template InvestorInvitation
  with
    operator : Party
    investor : Party
    public : Party
  where
    signatory operator

    key (operator, investor) : (Party, Party)
    maintainer key._1

    controller investor can
      InvestorInvitation_Accept : ContractId Investor
        with
          isPublic : Bool
        do
          create RegisteredInvestor with ..
          create Investor with ..


template Investor
  with
   operator : Party
   investor : Party
   isPublic : Bool
   public : Party
  where
    signatory operator, investor

    key (operator, investor) : (Party, Party)
    maintainer key._1

    controller investor can
      nonconsuming Investor_RequestCustodianRelationship : ContractId CustodianRelationshipRequest
        with
          custodian : Party
        do create CustodianRelationshipRequest with requester = investor, role = "Investor", ..

      nonconsuming Investor_RequestDepositTransfer : ContractId DepositTransferRequest
        with
          depositCid : ContractId AssetDeposit
          receiverAccountId : Id
        do
           deposit <- fetch depositCid
           assert $ deposit.account.owner == investor
           create DepositTransferRequest with senderAccountId = deposit.account.id, ..

      nonconsuming Investor_AllocateToExchange : ContractId DepositTransferRequest
        with
          depositCid : ContractId AssetDeposit
          exchange : Party
        do
          deposit <- fetch depositCid
          let receiverAccountId = Id
                with
                  signatories = deposit.account.id.signatories,
                    label = getAccountLabel investor exchange,
                    version = 0
          exercise self Investor_RequestDepositTransfer with ..

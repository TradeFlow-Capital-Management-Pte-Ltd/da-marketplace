daml 1.2
module Marketplace.Exchange where

import Marketplace.BinaryOption
import Marketplace.Custodian
import Marketplace.ExchangeParticipant
import Marketplace.Registry
import Marketplace.Token
import Marketplace.Trading
import Marketplace.Utils

import DA.Finance.Types

import DA.List


template ExchangeInvitation
  with
    operator : Party
    exchange : Party
    public : Party
  where
    signatory operator

    key (operator, exchange) : (Party, Party)
    maintainer key._1

    controller exchange can
      ExchangeInvitation_Accept : ContractId Exchange
        with
          name : Text
          location : Text
        do
          create RegisteredExchange with ..
          create Exchange with tokenPairs = [], binOptions = [], participants = [], ..


template Exchange
  with
    operator : Party
    exchange : Party
    public : Party
    tokenPairs : [IdPair] -- tokens pairs that are tradable on the exchange
    binOptions : [IdPair]
    participants : [Party]
  where
    signatory operator, exchange

    key (operator, exchange) : (Party, Party)
    maintainer key._1

    observer participants

    controller exchange can
      nonconsuming Exchange_RequestCustodianRelationship : ContractId CustodianRelationshipRequest
        with
          custodian : Party
        do create CustodianRelationshipRequest with requester = exchange, role = ExchangeRole, ..

      Exchange_InviteParticipant : (ContractId Exchange, ContractId ExchangeParticipantInvitation)
        with
          exchParticipant : Party
        do
          participantInvitationCid <- create ExchangeParticipantInvitation with ..
          exchangeCid <- create this with participants = dedup $ exchParticipant :: participants
          return (exchangeCid, participantInvitationCid)

      Exchange_AddPair : ContractId Exchange
        with
          baseTokenId : Id
          quoteTokenId : Id
        do
          (_, baseToken) <- fetchByKey @Token baseTokenId
          (_, quoteToken) <- fetchByKey @Token quoteTokenId
          assertMsg "Pair must have different base and quote tokens" $ baseToken.id.label /= quoteToken.id.label
          create this with tokenPairs = dedup $ (baseTokenId, quoteTokenId) :: tokenPairs

      Exchange_AddBinaryOption : ContractId Exchange
        with
          binOptionId : Id
          quoteTokenId : Id
        do
          (_, binOption) <- fetchByKey @BinaryOption binOptionId
          (_, quoteToken) <- fetchByKey @Token quoteTokenId
          create this with binOptions = dedup $ (binOptionId, quoteTokenId) :: binOptions

      nonconsuming Exchange_ApproveOrderRequest : ContractId Order
        with
          orderRequestCid : ContractId OrderRequest
          orderId : Int
        do
          orderRequest <- fetch orderRequestCid
          let pair = orderRequest.order.pair
          assertMsg ("pair " <> pair._1.label <> "/" <> pair._2.label <> " is not supported by exchange")
            $ (pair `elem` tokenPairs) || (pair `elem` binOptions)
          exercise orderRequestCid OrderRequest_Ack with ..

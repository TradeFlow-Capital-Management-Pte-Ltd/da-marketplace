daml 1.2
module Marketplace.Trading where

import Marketplace.BinaryOption
import Marketplace.Token
import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Types

import DA.Math


template OrderRequest
  with
    order : Order
  where
    signatory order.exchange, order.exchParticipant
    ensure order.qty > 0.0

    controller order.exchange can
      OrderRequest_Ack : ContractId Order
        with
          orderId : Int
        do create order with orderId = orderId

      OrderRequest_Reject : ()
        do return ()


template OrderCancelRequest
  with
    order : Order
  where
    signatory order.exchange, order.exchParticipant

    key (order.exchange, order.orderId) : (Party, Int)
    maintainer key._1

    controller order.exchange can
      OrderCancel_Ack : ()
        do exerciseByKey @Order (order.exchange, order.orderId) Order_Cancel

      OrderCancel_Reject : ()
        do return ()


template Order
  with
    exchange : Party
    exchParticipant : Party
    pair : TokenPair
    isBid : Bool
    price : Decimal
    qty : Decimal
    depositCid : ContractId AssetDeposit
    status : Text
    orderId : Int
  where
    signatory exchange, exchParticipant
    ensure qty > 0.0

    key (exchange, orderId) : (Party, Int)
    maintainer key._1

    controller exchange can
      Order_FillBinaryOptionOrder : (ContractId TradeSide, Optional (ContractId Order))
        with
          fillQty : Int
          fillPrice : Decimal
          counterParty : Party
          counterOrderId : Int
          timestamp : Text
        do
          assert $ fillQty > 0
          assert $ intToDecimal fillQty <= qty
          assert $ if isBid then fillPrice <= price
                            else fillPrice >= price
          deposit <- fetch depositCid
          let receiverAccountId = Id
                with signatories = deposit.account.id.signatories,
                      label = getAccountLabel counterParty exchange, version = 0
          (_, binOption) <- fetchByKey @BinaryOption pair._1
          (_, quoteToken) <- fetchByKey @Token pair._2
          if intToDecimal fillQty < qty then do
            let depositFillQty = roundBankers quoteToken.quantityPrecision $
                                    if isBid then intToDecimal fillQty * fillPrice
                                    else intToDecimal fillQty * (binOption.maxPrice - fillPrice)
            [filledCid, restCid] <- exercise depositCid AssetDeposit_Split
              with quantities = [depositFillQty]
            remainingCid <- create this
              with depositCid = restCid, qty = qty - intToDecimal fillQty, status = "PartiallyFilled"
            tradeCid <- create TradeSide with isBuy = isBid, optDepositCid = Some filledCid, qty = intToDecimal fillQty, ..
            return $ (tradeCid, Some remainingCid)
          else do
            tradeCid <- create TradeSide with isBuy = isBid, optDepositCid = Some depositCid, ..
            return $ (tradeCid, None)



      Order_Fill : (ContractId TradeSide, Optional (ContractId Order))
        with
          fillQty : Decimal
          fillPrice : Decimal
          counterParty : Party
          counterOrderId : Int
          timestamp : Text
        do
          assert $ fillQty > 0.0
          assert $ fillQty <= qty
          assert $ if isBid then fillPrice <= price
                            else fillPrice >= price
          deposit <- fetch depositCid
          let receiverAccountId = Id
                with signatories = deposit.account.id.signatories,
                      label = getAccountLabel counterParty exchange, version = 0
          (_, baseToken) <- fetchByKey @Token pair._1
          (_, quoteToken) <- fetchByKey @Token pair._2
          if fillQty < qty then do
            let minFillQty = 10.0 ** (- intToDecimal if isBid then quoteToken.quantityPrecision
                                                              else baseToken.quantityPrecision)
            let depositFillQty = min (if isBid
                                      then roundBankers quoteToken.quantityPrecision $ fillQty * fillPrice
                                      else fillQty)
                                     (deposit.asset.quantity - minFillQty)
            if (depositFillQty > 0.0 && depositFillQty < deposit.asset.quantity)
            then do
              [filledCid, restCid] <- exercise depositCid AssetDeposit_Split
                with quantities = [depositFillQty]
              -- txReqCid <- create DepositTransferRequest
              --   with sender = exchParticipant,
              --         senderAccountId = deposit.account.id,
              --         receiverAccountId = receiverAccountId,
              --         depositCid = filledCid
              remainingCid <- create this
                with depositCid = restCid, qty = qty - fillQty, status = "PartiallyFilled"
              tradeCid <- create TradeSide with isBuy = isBid, optDepositCid = Some filledCid, ..
              return $ (tradeCid, Some remainingCid)
            else do
              -- the fillQty is not enough to warrant a deposit transfer
              remainingCid <- create this with qty = qty - fillQty, status = "PartiallyFilled"
              tradeCid <- create TradeSide with isBuy = isBid, optDepositCid = None, ..
              return $ (tradeCid, Some remainingCid)
          else do
            -- txReqCid <- create DepositTransferRequest
            --   with sender = exchParticipant,
            --         senderAccountId = deposit.account.id,
            --         receiverAccountId = receiverAccountId,
            --         ..
            tradeCid <- create TradeSide with isBuy = isBid, optDepositCid = Some depositCid, ..
            return $ (tradeCid, None)

      Order_Cancel : ()
        do return ()

    controller exchParticipant can
      nonconsuming Order_RequestCancel : ContractId OrderCancelRequest
        do create OrderCancelRequest with order = this


template BrokerOrderRequest
  with
    brokerCustomer : Party
    broker : Party
    depositCid : ContractId AssetDeposit
    pair : TokenPair
    isBid : Bool
    price : Decimal
    qty : Decimal
  where
    signatory broker, brokerCustomer

    controller broker can
      BrokerOrderRequest_Accept : (ContractId BrokerOrder, ContractId DepositTransferRequest)
        with
          brokerOrderId : Int
        do
          deposit <- fetch depositCid
          assert $ deposit.account.owner == brokerCustomer
          brokerOrderCid <- create BrokerOrder with ..
          let receiverAccountId = Id with signatories = deposit.account.id.signatories, label = getAccountLabel broker broker, version = 0
          depositTransferReqCid <- create DepositTransferRequest with sender = brokerCustomer, senderAccountId = deposit.account.id, ..
          return (brokerOrderCid, depositTransferReqCid)


template BrokerOrder
  with
    brokerCustomer : Party
    broker : Party
    pair : TokenPair
    isBid : Bool
    price : Decimal
    qty : Decimal
    brokerOrderId : Int
  where
    signatory broker, brokerCustomer

    key (broker, brokerOrderId) : (Party, Int)
    maintainer key._1

    controller broker can
      BrokerOrder_Fill : ContractId DepositTransferRequest
        with
          depositCid : ContractId AssetDeposit
        do
          deposit <- fetch depositCid
          assertMsg ("the owner of the deposit is not broker: " <> show broker)
            $ deposit.account.owner == broker
          (_, baseToken) <- fetchByKey @Token pair._1
          (_, quoteToken) <- fetchByKey @Token pair._2
          let depositToken = if isBid then baseToken else quoteToken
          assertMsg ("deposit should be for " <> depositToken.id.label
            <> " but it is for " <> deposit.asset.id.label)
            $ deposit.asset.id == depositToken.id
          let depositQty = if isBid then deposit.asset.quantity
                           else roundBankers baseToken.quantityPrecision $ deposit.asset.quantity / price
          assertMsg ("the deposit quantity of " <> show depositQty
            <> " does not match the requested of " <> show qty) $ depositQty == qty
          let senderAccountId = deposit.account.id
              receiverAccountId = Id with signatories = deposit.account.id.signatories, label = getAccountLabel brokerCustomer broker, version = 0
          create BrokerTrade with isBuy = isBid, ..
          create DepositTransferRequest with sender = broker, ..


template TradeSide
  with
    exchParticipant : Party
    exchange : Party
    pair : TokenPair
    price : Decimal
    qty : Decimal
    isBuy : Bool
    orderId : Int
    counterOrderId : Int
    timestamp : Text
    optDepositCid : Optional (ContractId AssetDeposit)
    receiverAccountId : Id
  where
    signatory exchange, exchParticipant

    controller exchange can
      TradeSide_Settle : (ContractId SettledTradeSide, Optional (ContractId DepositTransferRequest))
        do
          optDepositTxReqCid <- case optDepositCid of
            Some depositCid -> do
              deposit <- fetch depositCid
              depositTxReqCid <- create DepositTransferRequest with
                sender = exchParticipant,
                  senderAccountId = deposit.account.id, ..
              return $ Some depositTxReqCid
            None -> return None
          settledTradeCid <- create SettledTradeSide with ..
          return (settledTradeCid, optDepositTxReqCid)

      TradeSide_SettleBinaryOption : (ContractId SettledTradeSide, Optional (ContractId DepositTransferRequest))
        with
          settledBinOptionCid : ContractId SettledBinaryOption
        do
          settledBinOption <- fetch settledBinOptionCid
          let needsTransfer = settledBinOption.outcome /= isBuy
          optDepositTxReqCid <- case (optDepositCid, needsTransfer) of
            (Some depositCid, True) -> do
              deposit <- fetch depositCid
              depositTxReqCid <- create DepositTransferRequest with
                sender = exchParticipant,
                  senderAccountId = deposit.account.id, ..
              return $ Some depositTxReqCid
            _ -> return None
          settledTradeCid <- create SettledTradeSide with ..
          return (settledTradeCid, optDepositTxReqCid)


template SettledTradeSide
  with
    exchParticipant : Party
    exchange : Party
    pair : TokenPair
    price : Decimal
    qty : Decimal
    isBuy : Bool
    orderId : Int
    counterOrderId : Int
    timestamp : Text
  where
    signatory exchange, exchParticipant


template BrokerTrade
  with
    brokerCustomer : Party
    broker : Party
    pair : TokenPair
    price : Decimal
    qty : Decimal
    isBuy : Bool
    brokerOrderId : Int
  where
    signatory broker, brokerCustomer

daml 1.2
module Marketplace.Transfer where

import DA.Finance.Asset
import DA.Finance.Types
import DA.Finance.Asset.Settlement
import DA.Text as T
import DA.Optional
import DA.Next.Set
import DA.List


template DepositTransferRequest
  with
    investor : Party
    senderAccountId : Id
    receiverAccountId : Id
    depositCid : ContractId AssetDeposit
  where
    let senderSig = head $ toList senderAccountId.signatories
        receiverSig = head $ toList receiverAccountId.signatories
        custodian = senderSig
    ensure senderSig == receiverSig
    signatory investor

    controller custodian can
      DepositTransferRequest_Approve : ContractId AssetDeposit
        do
          let sender = fromSome $ partyFromText (T.replace "'" "" (head (splitOn "@" senderAccountId.label)))
              receiver = fromSome $ partyFromText (T.replace "'" "" (head (splitOn "@" receiverAccountId.label)))
              senderProvider = fromSome $ partyFromText (T.replace "'" "" (splitOn "@" senderAccountId.label !! 1))
              receiverProvider = fromSome $ partyFromText (T.replace "'" "" (splitOn "@" receiverAccountId.label !! 1))
              senderAccount = Account with id = senderAccountId, provider = senderProvider, owner = sender
              receiverAccount = Account with id = receiverAccountId, provider = receiverProvider, owner = receiver

          senderRuleCid <- create AssetSettlementRule with account = senderAccount, observers = fromList [senderProvider], ctrls = empty
          receiverRuleCid <- create AssetSettlementRule with account = receiverAccount, observers = fromList [receiverProvider], ctrls = fromList [sender]
          newDepositCid <- exercise senderRuleCid AssetSettlement_Transfer with receiverAccountId = receiverAccountId, ..
          archive senderRuleCid
          archive receiverRuleCid

          return newDepositCid
